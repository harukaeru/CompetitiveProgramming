#!/usr/bin/env python3
import sys


def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    if N == 1:
        print(max(a[0], b[0], c[0]))
        exit()

    dp = {
        'ab': [0] * N,
        'ac': [0] * N,
        'bc': [0] * N,
    }
    dp['ab'][1] = max(a[0] + c[1], b[0] + c[1])
    dp['ac'][1] = max(a[0] + b[1], c[0] + b[1])
    dp['bc'][1] = max(b[0] + a[1], c[0] + a[1])
    for i in range(2, N):
        dp['ab'][i] = max(dp['ac'][i - 1] + c[i], dp['bc'][i - 1] + c[i])
        dp['ac'][i] = max(dp['ab'][i - 1] + b[i], dp['bc'][i - 1] + b[i])
        dp['bc'][i] = max(dp['ab'][i - 1] + a[i], dp['ac'][i - 1] + a[i])
    print(max(dp['ab'][N - 1], dp['ac'][N - 1], dp['bc'][N - 1]))



# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    c = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, a, b, c)

if __name__ == '__main__':
    main()
