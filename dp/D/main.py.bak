#!/usr/bin/env python3
import sys


def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    dp = [
        [0 for __ in range(W + 1)]
        for ___ in range(N + 1)
    ]
    for i in range(N + 1):
        if i == 0:
            continue
        for j in range(W + 1):
            if j == 0:
                continue
            d = j - w[i - 1]
            if d < 0:
                dp[i][j] = dp[i - 1][j]
            else:
                # 個数, 重さ
                dp[i][j] = max(dp[i - 1][d] + v[i - 1], dp[i - 1][j])
    print(dp[N][W])


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
